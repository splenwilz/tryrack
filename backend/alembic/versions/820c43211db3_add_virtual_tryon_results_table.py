"""add_virtual_tryon_results_table

Revision ID: 820c43211db3
Revises: 8eb1f63b0805
Create Date: 2025-10-29 14:31:45.648649

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '820c43211db3'
down_revision: Union[str, Sequence[str], None] = '8eb1f63b0805'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create virtual try-on status enum if it doesn't exist
    op.execute("DO $$ BEGIN CREATE TYPE virtualtryonstatus AS ENUM ('processing', 'completed', 'failed'); EXCEPTION WHEN duplicate_object THEN null; END $$;")
    
    # Create virtual_tryon_results table
    op.create_table(
        'virtual_tryon_results',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('item_type', sa.String(length=20), nullable=False),
        sa.Column('item_id', sa.String(length=50), nullable=False),
        sa.Column('user_image_url', sa.String(length=500), nullable=False),
        sa.Column('item_image_url', sa.String(length=500), nullable=False),
        sa.Column('result_image_url', sa.String(length=500), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        comment='Virtual try-on results generated by AI'
    )
    
    # Convert status column to use enum type
    op.execute("ALTER TABLE virtual_tryon_results ALTER COLUMN status TYPE virtualtryonstatus USING status::virtualtryonstatus")
    
    # Create indexes
    op.create_index(op.f('ix_virtual_tryon_results_id'), 'virtual_tryon_results', ['id'], unique=False)
    op.create_index(op.f('ix_virtual_tryon_results_user_id'), 'virtual_tryon_results', ['user_id'], unique=False)
    op.create_index(op.f('ix_virtual_tryon_results_status'), 'virtual_tryon_results', ['status'], unique=False)


def downgrade() -> None:
    """Downgrade schema."""
    # Drop indexes
    op.drop_index(op.f('ix_virtual_tryon_results_status'), table_name='virtual_tryon_results')
    op.drop_index(op.f('ix_virtual_tryon_results_user_id'), table_name='virtual_tryon_results')
    op.drop_index(op.f('ix_virtual_tryon_results_id'), table_name='virtual_tryon_results')
    
    # Drop table
    op.drop_table('virtual_tryon_results')
    
    # Drop enum if no other tables use it
    op.execute("DROP TYPE IF EXISTS virtualtryonstatus")
